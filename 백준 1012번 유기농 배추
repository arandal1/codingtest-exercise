import java.io.*;
import java.util.StringTokenizer;

public class beakjoon_1012 {
    private static int[][] land;
    private static boolean [][] visited;
    private static int[] dy={-1,0,1,0},dx={0,-1,0,1};
    private static  int N,M;
    public static void main(String[] args)throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st ;
        int T = Integer.parseInt(br.readLine());

        for(int i=1;i<=T;i++){
            st= new StringTokenizer(br.readLine());
            N=Integer.parseInt(st.nextToken());
            M=Integer.parseInt(st.nextToken());
            int thing = Integer.parseInt(st.nextToken());

            land=new int[M][N];
            visited = new boolean[M][N];
            
            
            for(int j=0;j<thing;j++){
                st=new StringTokenizer(br.readLine());
                int a=Integer.parseInt(st.nextToken());
                int b =Integer.parseInt(st.nextToken());
                land[b][a]=1;
            }
            int answer=0;
            for(int j=0;j<M;j++){
                for(int z=0;z<N;z++){
                    if(land[j][z]==1 && !visited[j][z]){
                        dfs(j,z);
                        answer++;
                    }
                    
                }
            }
            System.out.println(answer);
            



        }
    }
    public static void dfs(int y,int x){
        visited[y][x]=true;
        for(int i=0;i<4;i++){
            int ny = dy[i]+y;
            int nx = dx[i]+x;
            if(ny>=0&&nx>=0 && nx<N && ny<M){
                if(!visited[ny][nx]&& land[ny][nx]==1){
                    dfs(ny,nx);
                }
            }
        }
        

    }
}

//카운팅을 시도하는 횟수가 답이므로 main 함수쪽에서 시도 조건을 먼저 설정후 dfs탐색 시작 
